version: "2"
issues:
  # new-from-rev: main
  # Set to 0 to disable.
  max-issues-per-linter: 0
  # Set to 0 to disable.
  max-same-issues: 0

run:
  concurrency: 4
  timeout: 10m
  go: "1.25.1"

linters:
  default: all
  disable:
    # containedctx is a linter that detects struct contained context.Context field [fast: true, auto-fix: false]
    # using contextcheck which looks more active
    # - containedctx
    # Go linter that checks if package imports are in a list of acceptable packages [fast: false, auto-fix: false]
    # not required because of dependabot
    - depguard
    # checks for duplicate words in the source code
    # not sure if it makes sense
    # - dupword
    # Checks types passed to the json encoding functions. Reports unsupported types and optionally reports occations, where the check for the returned error can be omitted. [fast: false, auto-fix: false]
    # FUTURE: use asap, because we use json alot. nice feature is possibility to check if err check is required
    - errchkjson
    # Checks if all struct's fields are initialized [fast: false, auto-fix: false]
    # deprecated
    #    - exhaustivestruct
    # Checks if all structure fields are initialized
    # Not all fields have to be initialized
    - exhaustruct
    # Forbids identifiers [fast: true, auto-fix: false]
    # see no reason. allows to define regexp which are not allowed to use
    - forbidigo
    # finds forced type assertions [fast: true, auto-fix: false]
    # not used because we mostly use `_, _ = a.(int)`
    - forcetypeassert
    # Tool for detection of long functions [fast: true, auto-fix: false]
    # not used because it ignores complexity
    - funlen
    # check that no global variables exist [fast: true, auto-fix: false]
    # We use some global variables which is ok IMO
    - gochecknoglobals
    # Checks that no init functions are present in Go code [fast: true, auto-fix: false]
    # we use inits for the database abstraction
    - gochecknoinits
    # Computes and checks the cyclomatic complexity of functions [fast: true, auto-fix: false]
    # not used because cyclop also checks complexity of package
    # - gocyclo
    # Check if comments end in a period [fast: true, auto-fix: true]
    # FUTURE: checks if comments are written as specified
    # - godot
    # Golang linter to check the errors handling expressions [fast: false, auto-fix: false]
    # Not used in favore of errorlint
    #    - goerr113
    # Checks is file header matches to pattern [fast: true, auto-fix: false]
    # ignored because we don't write licenses as headers
    - goheader
    # In addition to fixing imports, goimports also formats your code in the same style as gofmt. [fast: true, auto-fix: true]
    # ignored in favor of gci
    #    - golint
    # An analyzer to detect magic numbers. [fast: true, auto-fix: false]
    # FUTURE: not that critical at the moment
    #    - gomnd
    # Manage the use of 'replace', 'retract', and 'excludes' directives in go.mod. [fast: true, auto-fix: false]
    # FUTURE: not a problem at the moment
    - gomoddirectives
    # Allow and block list linter for direct Go module dependencies. This is different from depguard where there are different block types for example version constraints and module recommendations. [fast: true, auto-fix: false]
    # FUTURE: maybe interesting because of licenses
    - gomodguard
    # Checks that printf-like functions are named with `f` at the end [fast: true, auto-fix: false]
    # FUTURE: not a problem at the moment
    - goprintffuncname
    # An analyzer to analyze expression groups. [fast: true, auto-fix: false]
    # I think the groups (vars, consts, imports, ...) we have atm are ok
    - grouper
    # Checks that your code uses short syntax for if-statements whenever possible [fast: true, auto-fix: false]
    # Dont't use its deprecated
    #    - ifshort
    # Enforces consistent import aliases [fast: false, auto-fix: false]
    # FUTURE: aliasing of imports is more or less consistent
    - importas
    # A linter that checks the number of methods inside an interface.
    # No need at the moment, repository abstraction was removed
    - interfacebloat
    # A linter that suggests interface types
    # Don't use it's archived
    #    - interfacer
    # Accept Interfaces, Return Concrete Types [fast: false, auto-fix: false]
    # FUTURE: check if no interface is returned
    - ireturn
    # Reports long lines [fast: true, auto-fix: false]
    # FUTURE: would make code more readable
    - lll
    # Checks key valur pairs for common logger libraries (kitlog,klog,logr,zap).
    # FUTURE: useable as soon as we switch logger library
    - loggercheck
    # maintidx measures the maintainability index of each function. [fast: true, auto-fix: false]
    # not used because volume of halstead complexity feels strange as measurement https://en.wikipedia.org/wiki/Halstead_complexity_measures
    - maintidx
    # Finds slice declarations with non-zero initial length [fast: false, auto-fix: false]
    # I would prefer to use https://github.com/alexkohler/prealloc
    - makezero
    # Checks that there is no simultaneous return of `nil` error and an invalid value. [fast: false, auto-fix: false]
    # FUTURE: would reduce checks and panics
    - nilnil
    # nlreturn checks for a new line before return and branch statements to increase code clarity [fast: true, auto-fix: false]
    # DISCUSS: IMO the readability of does not always increase using more empty lines
    - nlreturn
    # noctx finds sending http request without context.Context [fast: false, auto-fix: false]
    # only interesting if using http
    - noctx
    # detects snake case of variable naming and function name.
    # has not been a problem in our code and deprecated
    #    - nosnakecase
    # paralleltest detects missing usage of t.Parallel() method in your Go test [fast: true, auto-fix: false]
    # FUTURE: will break all of our tests
    - paralleltest
    # Finds slice declarations that could potentially be preallocated [fast: true, auto-fix: false]
    # FUTURE: would improve performance
    - prealloc
    # find code that shadows one of Go's predeclared identifiers [fast: true, auto-fix: false]
    # FUTURE: checks for overwrites
    - predeclared
    # Check Prometheus metrics naming via promlint [fast: true, auto-fix: false]
    # Not interesting at the moment
    - promlinter
    # Checks that package variables are not reassigned
    # FUTURE: checks if vars like Err's are reassigned which might break code
    # - reassign
    # Fast, configurable, extensible, flexible, and beautiful linter for Go. Drop-in replacement of golint. [fast: false, auto-fix: false]
    # Linter aggregator, would allow to use less other linters
    - revive
    # checks for unpinned variables in go programs
    # deprecated
    #    - scopelint
    # Finds unused struct fields [fast: false, auto-fix: false]
    # deprecated, replaced by unused
    #    - structcheck
    # Checks the struct tags. [fast: true, auto-fix: false]
    # FUTURE: would help for new structs
    - tagliatelle
    # linter checks if examples are testable (have an expected output)
    # FUTURE: as soon as examples are added
    - testableexamples
    # linter that makes you use a separate _test package [fast: true, auto-fix: false]
    # don't use because we test some unexported functions
    - testpackage
    # thelper detects golang test helpers without t.Helper() call and checks the consistency of test helpers [fast: false, auto-fix: false]
    # FUTURE: nice to improve test quality
    - thelper
    # tparallel detects inappropriate usage of t.Parallel() method in your Go test codes [fast: false, auto-fix: false]
    # FUTURE: nice to improve test quality
    - tparallel
    # Reports unused function parameters [fast: false, auto-fix: false]
    # DISCUSS: nice idea and would improve code quality, but how to handle false positives?
    - unparam
    # A linter that detect the possibility to use variables/constants from the Go standard library.
    # FUTURE: improves code quality
    - usestdlibvars
    # Finds unused global variables and constants [fast: false, auto-fix: false]
    # deprecated, replaced by unused
    #    - varcheck
    # checks that the length of a variable's name matches its scope [fast: false, auto-fix: false]
    # I would not use it because it more or less checks if var lenght matches
    - varnamelen
    # wastedassign finds wasted assignment statements. [fast: false, auto-fix: false]
    # FUTURE: would improve code quality (maybe already checked by vet?)
    - wastedassign
    # Tool for detection of leading and trailing whitespace [fast: true, auto-fix: true]
    # Not sure if it improves code readability
    # - whitespace
    # Checks that errors returned from external packages are wrapped [fast: false, auto-fix: false]
    # FUTURE: improves UX because all the errors will be ZITADEL errors
    - wrapcheck
    # Whitespace Linter - Forces you to use empty lines! [fast: true, auto-fix: false]
    # FUTURE: improves code quality by allowing and blocking line breaks
    - wsl
    # An analyzer to detect magic numbers.
    # FUTURE: improve code quality by give semantic name for number.
    - mnd
    # Finds commonly misspelled English words.
    # Disable because the extenstion of vscode or other idea is good enough
    - misspell
    # Go linter to check the errors handling expressions.
    # Disable because some rules not go idiomatic. Like Not allow dynamic wraping error.
    - err113
    # Check whether the function uses a non-inherited context.
    - contextcheck
    # Detects nested contexts in loops and function literals.
    - fatcontext
    # Intrange is a linter to find places where for loops could make use of an integer range.
    # FUTURE: can apply this rules when this syntax are family to almost developer. This syntax only apply for go 1.22+
    - intrange
    - tagalign

  exclusions:
    rules:
      - path: _test\.go
        linters:
          - errcheck
          - gocyclo
          - dupl